name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    # Set up Java 17
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Create .env File
      run: |
        echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> .env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
        echo "PORT=${{ secrets.PORT }}" >> .env
        echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
        echo "AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}" >> .env
        cat .env

    - name: Install Dependencies
      run: npm install

    - name: Debug Snyk Token
      run: |
        if [ -z "${{ secrets.SNYK_TOKEN }}" ]; then
          echo "❌ SNYK_TOKEN is not set!"
          exit 1
        else
          echo "✅ SNYK_TOKEN is set."
        fi

    - name: Install Snyk CLI
      run: npm install -g snyk

    - name: Authenticate with Snyk
      run: snyk auth ${{ secrets.SNYK_TOKEN }}

    - name: Fix vulnerabilities using Snyk
      run: snyk wizard
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    - name: Run Security Scan (Snyk)
      run: snyk test
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    - name: Install SonarScanner
      run: |
        sudo apt-get update
        sudo apt-get install -y unzip
        curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
        unzip sonar-scanner.zip
        sudo mv sonar-scanner-*/ /opt/sonar-scanner
        echo "SONAR_SCANNER_HOME=/opt/sonar-scanner" >> $GITHUB_ENV
        echo "PATH=/opt/sonar-scanner/bin:$PATH" >> $GITHUB_ENV

    - name: Ensure Permissions for SonarScanner
      run: sudo chmod +x /opt/sonar-scanner/bin/sonar-scanner

    - name: Verify SonarScanner installation
      run: sonar-scanner --version

    - name: Debug SonarCloud Variables
      run: |
        echo "SONAR_PROJECT_KEY=${{ secrets.SONAR_PROJECT_KEY }}"
        echo "SONAR_ORG_KEY=${{ secrets.SONAR_ORG_KEY }}"

    - name: Run SonarCloud Scan
      run: |
        sonar-scanner -X \
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
          -Dsonar.organization=${{ secrets.SONAR_ORG_KEY }} \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
          -Dsonar.java.jdkHome=$JAVA_HOME
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    # Configure AWS CLI Credentials (Secure Access)
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Verify AWS CLI Credentials
      run: aws sts get-caller-identity

    # Debug AWS ECR Login Process
    - name: Debug AWS ECR Login
      run: |
        echo "ECR URL: ${{ secrets.AWS_ECR_URL }}"
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} --debug | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_URL }}

    # Create ECR Repository (if it doesn't exist)
    - name: Create ECR Repository (if it doesn't exist)
      run: |
        aws ecr describe-repositories --repository-name my-auth-service --region ${{ secrets.AWS_REGION }} || \
        aws ecr create-repository --repository-name my-auth-service --region ${{ secrets.AWS_REGION }}

    - name: Build and Tag Docker Image
      run: |
        docker build -t my-auth-service .
        docker tag my-auth-service:latest ${{ secrets.AWS_ECR_URL }}/my-auth-service:latest

    - name: Push Image to AWS ECR
      run: |
        docker push ${{ secrets.AWS_ECR_URL }}/my-auth-service:latest

    - name: Deploy to AWS ECS
      run: |
        aws ecs update-service --cluster my-ecs-cluster --service my-auth-service --force-new-deployment
