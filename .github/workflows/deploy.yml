name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Create .env File
      run: |
        echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> .env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
        echo "PORT=${{ secrets.PORT }}" >> .env
        echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
        echo "AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}" >> .env
        cat .env

    - name: Install Dependencies
      run: npm install

    - name: Install Snyk CLI and Run Security Scan
      run: |
        npm install -g snyk
        snyk auth ${{ secrets.SNYK_TOKEN }}
        snyk test
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Verify AWS CLI Credentials
      run: aws sts get-caller-identity

    - name: Login to AWS ECR
      run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_URL }}

    - name: Build and Push Docker Image
      run: |
        docker build -t my-auth-service .
        docker tag my-auth-service:latest ${{ secrets.AWS_ECR_URL }}/my-auth-service:latest
        docker push ${{ secrets.AWS_ECR_URL }}/my-auth-service:latest

    - name: Register ECS Task Definition
      run: |
        cat > task-definition.json << EOF
        {
          "family": "my-auth-service",
          "networkMode": "awsvpc",
          "containerDefinitions": [
            {
              "name": "my-auth-service-container",
              "image": "${{ secrets.AWS_ECR_URL }}/my-auth-service:latest",
              "memory": 512,
              "cpu": 256,
              "essential": true,
              "portMappings": [
                { "containerPort": 80, "hostPort": 80, "protocol": "tcp" }
              ],
              "environment": [
                { "name": "MONGO_URI", "value": "${{ secrets.MONGO_URI }}" },
                { "name": "JWT_SECRET", "value": "${{ secrets.JWT_SECRET }}" }
              ]
            }
          ],
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "256",
          "memory": "512",
          "executionRoleArn": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole"
        }
        EOF
        aws ecs register-task-definition --cli-input-json file://task-definition.json --region ${{ secrets.AWS_REGION }}

    - name: Ensure ECS Cluster Exists
      run: |
        if ! aws ecs describe-clusters --cluster my-ecs-cluster --region ${{ secrets.AWS_REGION }} --query "clusters[0].clusterName" --output text 2>/dev/null | grep -q my-ecs-cluster; then
          aws ecs create-cluster --cluster-name my-ecs-cluster --region ${{ secrets.AWS_REGION }}
        fi

    - name: Ensure ECS Service Exists or Create It
      run: |
        ECS_CLUSTER="my-ecs-cluster"
        ECS_SERVICE="my-auth-service"
        TASK_DEFINITION="my-auth-service"
        AWS_REGION="${{ secrets.AWS_REGION }}"
        SUBNETS="subnet-xxxxxx,subnet-yyyyyy" # Update with actual subnet IDs
        SECURITY_GROUP="sg-xxxxxx" # Update with actual security group ID

        # Check if ECS service exists
        SERVICE_EXISTS=$(aws ecs describe-services --cluster "$ECS_CLUSTER" --services "$ECS_SERVICE" --query "services[0].serviceName" --output text --region "$AWS_REGION" 2>/dev/null || echo "None")

        if [ "$SERVICE_EXISTS" == "None" ]; then
          echo "ECS Service '$ECS_SERVICE' does not exist. Creating it now..."
          
          aws ecs create-service \
            --cluster "$ECS_CLUSTER" \
            --service-name "$ECS_SERVICE" \
            --task-definition "$TASK_DEFINITION" \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[$SUBNETS],securityGroups=[$SECURITY_GROUP],assignPublicIp=ENABLED}" \
            --region "$AWS_REGION"

          echo "ECS Service '$ECS_SERVICE' created successfully."
        else
          echo "ECS Service '$ECS_SERVICE' exists. Proceeding with update..."
        fi

    - name: Deploy to AWS ECS
      run: |
        aws ecs update-service \
          --cluster my-ecs-cluster \
          --service my-auth-service \
          --task-definition my-auth-service \
          --force-new-deployment \
          --region ${{ secrets.AWS_REGION }}
