name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Runs when code is pushed to the main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Create .env File
      run: |
        echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> .env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
        echo "PORT=${{ secrets.PORT }}" >> .env
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
        echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
        echo "AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}" >> .env
        cat .env  # Debugging: Check if .env is created properly

    - name: Install Dependencies
      run: npm install

    - name: Debug Snyk Token
      run: |
        if [ -z "${{ secrets.SNYK_TOKEN }}" ]; then
          echo "❌ SNYK_TOKEN is not set!"
          exit 1
        else
          echo "✅ SNYK_TOKEN is set."
        fi

    - name: Install Snyk CLI
      run: npm install -g snyk

    - name: Authenticate with Snyk
      run: snyk auth ${{ secrets.SNYK_TOKEN }}

    - name: Fix vulnerabilities using Snyk
      run: snyk wizard
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    - name: Run Security Scan (Snyk)
      run: snyk test
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    - name: Install SonarScanner CLI
      run: |
        wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
        unzip sonar-scanner-cli-4.6.2.2472-linux.zip
        export PATH=$PWD/sonar-scanner-4.6.2.2472-linux/bin:$PATH

    - name: Run SonarCloud Scan
      run: |
        sonar-scanner \
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
          -Dsonar.organization=${{ secrets.SONAR_ORG_KEY }} \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Login to AWS ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_URL }}

    - name: Build and Tag Docker Image
      run: |
        docker build -t my-auth-service .
        docker tag my-auth-service:latest ${{ secrets.AWS_ECR_URL }}/my-auth-service:latest

    - name: Push Image to AWS ECR
      run: |
        docker push ${{ secrets.AWS_ECR_URL }}/my-auth-service:latest

    - name: Deploy to AWS ECS
      run: |
        aws ecs update-service --cluster my-ecs-cluster --service my-auth-service --force-new-deployment
